openapi: 3.0.0
info:
  title: User Service API
  version: 1.0.0
  description: REST API for managing users, locations, favorites, and reservations.

servers:
  - url: http://localhost:3000/api

paths:
  /users:
    get:
      summary: Get all users
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      summary: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
      responses:
        '201':
          description: User created
        '400':
          description: Invalid input

  /users/{id}:
    get:
      summary: Get a user by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Found user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
    put:
      summary: Update a user
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
      responses:
        '200':
          description: User updated
        '400':
          description: Invalid data
        '404':
          description: User not found
    delete:
      summary: Delete a user
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User deleted
        '404':
          description: User not found

  /locations:
    get:
      summary: Get all locations
      responses:
        '200':
          description: A list of locations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Location'
    post:
      summary: Create a location
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LocationInput'
      responses:
        '201':
          description: Location created
        '400':
          description: Invalid input

  /favorites/user/{userId}:
    get:
      summary: Get favorite companies for a user
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: List of favorite companies

  /favorites:
    post:
      summary: Add favorite company
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
      responses:
        '201':
          description: Favorite added

  /favorites/{id}:
    delete:
      summary: Remove favorite
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Favorite deleted

  /reservations:
    get:
      summary: Get all reservations
      responses:
        '200':
          description: A list of reservations

    post:
      summary: Create a new reservation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReservationInput'
      responses:
        '201':
          description: Reservation created

  /reservations/{id}:
    get:
      summary: Get reservation by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Found reservation
        '404':
          description: Reservation not found

    put:
      summary: Update a reservation
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReservationInput'
      responses:
        '200':
          description: Reservation updated

    delete:
      summary: Delete a reservation
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Reservation deleted

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
        oauth_id:
          type: string
        location_id:
          type: integer

    UserInput:
      type: object
      required:
        - first_name
        - last_name
        - email
        - location_id
      properties:
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
        oauth_id:
          type: string
        location_id:
          type: integer

    Location:
      type: object
      properties:
        id:
          type: integer
        postal_code:
          type: string
        city:
          type: string
        country:
          type: string

    LocationInput:
      type: object
      required:
        - postal_code
        - city
        - country
      properties:
        postal_code:
          type: string
        city:
          type: string
        country:
          type: string

    ReservationInput:
      type: object
      required:
        - reservation_code
        - user_id
      properties:
        reservation_code:
          type: string
        user_id:
          type: integer
